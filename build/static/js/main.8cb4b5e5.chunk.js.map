{"version":3,"sources":["CheckoutForm.jsx","DialogComp.jsx","App.jsx","index.js"],"names":["i","CheckoutForm","locale","selectedMenu","options1","layout","setLayout","stripe","useStripe","elements","useElements","useState","message","setMessage","isLoading","setIsLoading","useEffect","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","console","log","status","handleSubmit","e","preventDefault","confirmPayment","confirmParams","return_url","error","type","x","ui","id","options","paymentElement","onSubmit","className","FormControl","RadioGroup","aria-labelledby","name","value","onChange","event","target","sx","color","FormControlLabel","control","Radio","label","styled","Dialog","theme","padding","spacing","stripePromise","loadHyper","App","React","setTheme","setLocale","darkTheme","createTheme","palette","mode","typography","fontFamily","appearance","fonts","cssSrc","family","src","weight","loader","fields","billingDetails","address","country","city","defaultCollapsed","radios","spacedAccordionItems","paymentMethodOrder","wallets","applePay","googlePay","document","body","style","background","ThemeProvider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8cb4b5e5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Switch, { SwitchProps } from \"@mui/material/Switch\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  CardNumber,\n  PaymentElement,\n  CardCVC,\n  CardExpiry,\n  CardElement,\n  useElements,\n  useStripe,\n  // PaymentRequestButtonElement,\n} from \"@juspay-tech/react-hyper-js\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormLabel from \"@mui/material/FormLabel\";\n\n//import { PaymentRequestButtonElement } from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm({\n  locale,\n  selectedMenu,\n  options1,\n  layout,\n  setLayout,\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [paymentRequest, setPaymentRequest] = useState(null);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"order_id\"\n    );\n\n    // if (stripe) {\n    //   const pr = stripe.paymentRequest({\n    //     country: 'US',\n    //     currency: 'usd',\n    //     total: {\n    //       label: 'Demo total',\n    //       amount: 1099,\n    //     },\n    //     requestPayerName: true,\n    //     requestPayerEmail: true,\n    //   });\n    //   console.log(\">>>\", pr)\n    //   // Check the availability of the Payment Request API.\n    //   pr.canMakePayment().then(result => {\n    //     if (result) {\n    //       setPaymentRequest(pr);\n    //     }\n    //   });\n    // }\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      console.log(\"inisde effect\", paymentIntent);\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n    console.log(\"ELEMENTS\", elements);\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/complete\",\n      },\n    });\n    console.log(\"ERORR\", error);\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n  const options = {\n    // style: {\n    //   base: {\n    //     iconColor: '#c4f0ff',\n    //     color: 'green',\n    //     fontWeight: '800',\n    //     fontFamily: 'Combo',\n    //     fontSize: '16px',\n    //     fontSmoothing: 'antialiased',\n    //     ':-webkit-autofill': {\n    //       color: '#fce883',\n    //     },\n    //     '::placeholder': {\n    //       color: '#87BBFD',\n    //     },\n    //     ':hover': {\n    //       backgroundColor: 'lightblue',\n    //     },\n    //   },\n    //   invalid: {\n    //     backgroundColor: 'red',\n    //     iconColor: '#FFC7EE',\n    //     color: '#FFC7EE',\n    //     fontSize: '30px',\n    //   },\n    //   complete: {\n    //     backgroundColor: 'gray',\n    //     iconColor: '#FFC7EE',\n    //     color: 'brown',\n    //   },\n    //   empty: {\n    //     backgroundColor: 'green',\n    //     iconColor: '#FFC7EE',\n    //     color: '#FFC7EE',\n    //   },\n    // },\n  };\n\n  const x =\n    locale.locale === \"ja\"\n      ? `今払う`\n      : locale.locale === \"ar\"\n      ? `ادفع الآن`\n      : \"Pay Now\";\n  // if (paymentRequest) {\n  //   return <PaymentRequestButtonElement options={{ paymentRequest }} />\n  // }\n\n  var ui = <PaymentElement id=\"paymentElement\" options={options1} />;\n  let paymentElement = (\n    <>\n      {\" \"}\n      {layout === \"accordion\" && ui}\n      {layout === \"tabs\" && ui}\n      {layout === \"spaced\" && ui}\n    </>\n  );\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      {selectedMenu && (\n        <div className=\"layout\">\n          <div className=\"menuHeader\">Layout</div>\n          <FormControl>\n            <RadioGroup\n              aria-labelledby=\"demo-controlled-radio-buttons-group\"\n              name=\"controlled-radio-buttons-group\"\n              value={layout}\n              onChange={(event) => {\n                setLayout(event.target.value);\n              }}\n              sx={{\n                color: \"#aaa7a7\",\n              }}\n            >\n              <FormControlLabel value=\"tabs\" control={<Radio />} label=\"Tabs\" />\n              <FormControlLabel\n                value=\"accordion\"\n                control={<Radio />}\n                label=\"Accordion\"\n              />\n              <FormControlLabel\n                value=\"spaced\"\n                control={<Radio />}\n                label=\"Spaced Accordion\"\n              />\n            </RadioGroup>\n          </FormControl>\n        </div>\n      )}\n      {/* <PaymentRequestButtonElement id=\"paymentButton\" /> */}\n\n      {/* <PaymentRequestButtonElement id=\"paymentButton\" /> */}\n      {paymentElement}\n      {/* <CardElement id=\"sds\" options={options} /> */}\n      {/* <CardNumber id=\"card-number\" options={options} />\n      <CardCVC id=\"card-cvc\" options={options} />\n      <CardExpiry id=\"card-expiry\" options={options} /> */}\n\n      <button id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : x}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}\n","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Typography from '@mui/material/Typography';\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n    '& .MuiDialogContent-root': {\n        padding: theme.spacing(2),\n    },\n    '& .MuiDialogActions-root': {\n        padding: theme.spacing(1),\n    },\n}));\n\n\nfunction BootstrapDialogTitle(props) {\n    const { children, onClose, ...other } = props;\n\n    return (\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n            {children}\n        </DialogTitle>\n    );\n}\n\nexport default function CustomizedDialogs() {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <Button variant=\"outlined\" onClick={handleClickOpen}>\n                Test Cards\n            </Button>\n            <BootstrapDialog\n                onClose={handleClose}\n                aria-labelledby=\"customized-dialog-title\"\n                open={open}\n            >\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    Test Cards\n                </BootstrapDialogTitle>\n                <DialogContent dividers>\n                    <div class=\"cardtest\">\n                        <Typography gutterBottom>\n                            3DS Not Supported (Ok): 4242 4242 4242 4242\n                        </Typography>\n                        <Typography gutterBottom>\n                            3DS 2.0 Required (Ok): 4000 0000 0000 3220\n                        </Typography>\n                        <Typography gutterBottom>\n                            3DS Required (Declined): 4000 0084 0000 1629\n                        </Typography>\n                        <Typography gutterBottom>\n                            3DS Required (OK): 4000 0000 0000 3063\n                        </Typography>\n                        <Typography gutterBottom>\n                            3DS Not supported: 3782 822463 10005\n                        </Typography>\n                    </div>\n                </DialogContent>\n                <DialogActions>\n\n                </DialogActions>\n            </BootstrapDialog>\n        </div>\n    );\n}\n","import React, { useState } from \"react\";\nimport { loadHyper } from \"@juspay-tech/hyper-js\";\nimport { Elements } from \"@juspay-tech/react-hyper-js\";\nimport Fab from \"@mui/material/Fab\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Menu from \"@mui/material/Menu\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormControl from \"@mui/material/FormControl\";\n// import FormLabel from \"@mui/material/FormLabel\";\nimport CheckoutForm from \"./CheckoutForm\";\nimport DialogComp from \"./DialogComp\";\nimport \"./App.css\";\n\n//const stripePromise = loadStripe(\"pk_test_51KP0OALGEyT9T908Fv0PuwhRMQ2N9sWsrwZQS5hvTan6m6e73Bsv42DyTQwiw63jlluM1tvzeemOrXlE1AvmKY3D00R0yeN1my\");\nconst stripePromise = loadHyper(\"pk_snd_f2335975798246238ac421cac506b503\");\n\nexport default function App() {\n  const [clientSecret, setClientSecret] = useState(\"pay_sdsd_secret_sdsd\");\n  const [theme, setTheme] = React.useState(\"default\");\n  const [locale, setLocale] = React.useState(\"\");\n  const [layout, setLayout] = React.useState(\"tabs\");\n\n  const darkTheme = createTheme({\n    palette: {\n      mode:\n        theme === \"midnight\" || theme === \"soft\" || theme === \"flat\"\n          ? \"dark\"\n          : \"light\",\n    },\n    typography: {\n      fontFamily: \"Poppins\",\n    },\n  });\n  const handleThemeChange = (event) => {\n    setTheme(event.target.value);\n    setLocale(\"\");\n  };\n\n  let options = {\n    clientSecret,\n    appearance: {\n      theme: theme,\n    },\n    fonts: [\n      {\n        cssSrc:\n          \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700&display=swap\",\n      },\n      {\n        cssSrc:\n          \"https://fonts.googleapis.com/css2?family=Quicksand:wght@400;500;600;700&family=Qwitcher+Grypen:wght@400;700&display=swap\",\n      },\n      {\n        cssSrc: \"https://fonts.googleapis.com/css2?family=Combo&display=swap\",\n      },\n      {\n        family: \"something\",\n        src: \"https://fonts.gstatic.com/s/combo/v21/BXRlvF3Jh_fIhj0lDO5Q82f1.woff2\",\n        weight: \"700\",\n      },\n    ],\n    locale: locale,\n    loader: \"always\",\n  };\n\n  let layout1 = {\n    type: layout === \"spaced\" ? \"accordion\" : layout,\n    defaultCollapsed: false,\n    radios: true,\n    spacedAccordionItems: layout === \"spaced\",\n  };\n  const options1 = {\n    fields: {\n      billingDetails: {\n        address: {\n          country: \"auto\",\n          city: \"auto\",\n        },\n      },\n    },\n    layout: layout1,\n    // layout: {\n    //   type: 'orca',\n    //   defaultCollapsed: false,\n    //   radios: false,\n    //   spacedAccordionItems: true\n    // },\n    paymentMethodOrder: [\"klarna\", \"wechat_pay\"],\n    wallets: {\n      applePay: \"auto\",\n      googlePay: \"auto\",\n    },\n  };\n\n  document.body.style.background =\n    options.appearance.theme === \"flat\"\n      ? \"#030304f5\"\n      : options.appearance.theme === \"midnight\"\n      ? \"#1a1f36\"\n      : options.appearance.theme === \"soft\"\n      ? \"#3e3e3e\"\n      : options.appearance.theme === \"brutal\"\n      ? \"#7cff708a\"\n      : \"#ddd8d812\";\n  var elements = (\n    <Elements options={options} stripe={stripePromise}>\n      <CheckoutForm\n        locale={options.locale}\n        options1={options1}\n        layout={layout}\n        setLayout={setLayout}\n      />\n    </Elements>\n  );\n\n  return (\n    <div className=\"App\">\n      {clientSecret && (\n        <div>\n          <ThemeProvider theme={darkTheme}>\n            <div className=\"editor\">\n              <div className=\"menuHeader\">{\"Theme\"}</div>\n              <FormControl>\n                <RadioGroup\n                  aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                  name=\"controlled-radio-buttons-group\"\n                  value={theme}\n                  onChange={handleThemeChange}\n                  sx={{\n                    color: \"#aaa7a7\",\n                  }}\n                >\n                  <FormControlLabel\n                    value=\"default\"\n                    control={<Radio />}\n                    label=\"Default\"\n                  />\n                  <FormControlLabel\n                    value=\"brutal\"\n                    control={<Radio />}\n                    label=\"Brutal\"\n                  />\n                  <FormControlLabel\n                    value=\"midnight\"\n                    control={<Radio />}\n                    label=\"Midnight\"\n                  />\n                  <FormControlLabel\n                    value=\"soft\"\n                    control={<Radio />}\n                    label=\"Soft\"\n                  />\n                  <FormControlLabel\n                    value=\"none\"\n                    control={<Radio />}\n                    label=\"None\"\n                  />\n                  <FormControlLabel\n                    value=\"charcoal\"\n                    control={<Radio />}\n                    label=\"Charcoal\"\n                  />\n                </RadioGroup>\n              </FormControl>\n\n              {/* <div className=\"menuHeader\">{\"Language\"}</div>\n              <FormControl>\n                <RadioGroup\n                  aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                  name=\"controlled-radio-buttons-group\"\n                  value={locale}\n                  onChange={(event) => {\n                    setLocale(event.target.value);\n                    setTheme(\"\");\n                  }}\n                  sx={{\n                    color: \"#aaa7a7\",\n                  }}\n                >\n                  <FormControlLabel\n                    value=\"auto\"\n                    control={<Radio />}\n                    label=\"Auto\"\n                  />\n                  <FormControlLabel\n                    value=\"ar\"\n                    control={<Radio />}\n                    label=\"Arabic\"\n                  />\n                  <FormControlLabel\n                    value=\"ja\"\n                    control={<Radio />}\n                    label=\"Japanese\"\n                  />\n                </RadioGroup>\n              </FormControl> */}\n              <div className=\"menuHeader\">{\"Layout\"}</div>\n              <FormControl>\n                <RadioGroup\n                  aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                  name=\"controlled-radio-buttons-group\"\n                  value={layout}\n                  onChange={(event) => {\n                    setLayout(event.target.value);\n                  }}\n                  sx={{\n                    color: \"#aaa7a7\",\n                  }}\n                >\n                  <FormControlLabel\n                    value=\"tabs\"\n                    control={<Radio />}\n                    label=\"Tabs\"\n                  />\n                  <FormControlLabel\n                    value=\"accordion\"\n                    control={<Radio />}\n                    label=\"Accordion\"\n                  />\n                  <FormControlLabel\n                    value=\"spaced\"\n                    control={<Radio />}\n                    label=\"Spaced Accordion\"\n                  />\n                </RadioGroup>\n              </FormControl>\n            </div>\n\n            {theme === \"default\" && elements}\n            {theme === \"brutal\" && elements}\n            {theme === \"midnight\" && elements}\n            {theme === \"soft\" && elements}\n            {theme === \"charcoal\" && elements}\n            {theme === \"none\" && elements}\n\n            {/* {locale === \"ar\" && elements}\n            {locale === \"ja\" && elements}\n            {locale === \"auto\" && elements} */}\n          </ThemeProvider>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}